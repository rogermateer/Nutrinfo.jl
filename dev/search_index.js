var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Nutrinfo","category":"page"},{"location":"#Nutrinfo","page":"Home","title":"Nutrinfo","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Nutrinfo.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Nutrinfo]","category":"page"},{"location":"#Nutrinfo._add_components-Tuple{MetaDiGraph, NutrientVector}","page":"Home","title":"Nutrinfo._add_components","text":"Nutrinfo.resolve helper function.\n\nAdds all the Components of the supplied NutrientVector src as edges from the existing vertex for src to either new or existing vertices for the Components of src.\n\n\n\n\n\n","category":"method"},{"location":"#Nutrinfo._find_nv_in_db-Tuple{String, Vector{NutrientVector}}","page":"Home","title":"Nutrinfo._find_nv_in_db","text":"Nutrinfo.resolve helper function.\n\nTry to find the NutrientVector with name name in the supplied NutrientVector database nvDB, and return the collection of matching NutrientVectors.\n\nIf this collection is empty, there is no match, and the algorithm regards the NutrientVector in question as a basis vector.  (It could also mean that the database is missing an entry that should be there, and it is up to the user to decide whether that is the case, and to add it if possible.)\n\nIf the collection has exactly one member, that is a match.\n\nIf it has more than one member, then it is flagged as an error by the algorithm, and the database needs to be fixed to resolve the duplication.\n\n\n\n\n\n","category":"method"},{"location":"#Nutrinfo.add_edge-Tuple{MetaDiGraph, String, String, String}","page":"Home","title":"Nutrinfo.add_edge","text":"Nutrinfo.resolve helper function.\n\nAdds an edge to our MetaDiGraph representing the relationship that NutrientVector src has quantity qty of NutrientVector dst as a Component.\n\n\n\n\n\n","category":"method"},{"location":"#Nutrinfo.add_vertex-Tuple{MetaDiGraph, String}","page":"Home","title":"Nutrinfo.add_vertex","text":"Nutrinfo.resolve helper function.\n\nAdds a vertex to our MetaDiGraph representing NutrientVector nv.\n\n\n\n\n\n","category":"method"},{"location":"#Nutrinfo.list_cycles-Tuple{MetaDiGraph}","page":"Home","title":"Nutrinfo.list_cycles","text":"Nutrinfo.resolve helper function.\n\nLists all the cycles in our MetaDiGraph.  We require that there be no cycles if we are going to be able to use list_paths().  So this function should be called before calling list_paths() to ensure that the latter terminates.\n\n\n\n\n\n","category":"method"},{"location":"#Nutrinfo.list_edges-Tuple{MetaDiGraph}","page":"Home","title":"Nutrinfo.list_edges","text":"Nutrinfo.resolve helper function.\n\nLists all edges in our MetaDiGraph as three element arrays of the form [src,qty,dst], representing the relationship that NutrientVector src has quantity qty of NutrientVector dst as a Component.\n\n\n\n\n\n","category":"method"},{"location":"#Nutrinfo.list_frontier-Tuple{MetaDiGraph}","page":"Home","title":"Nutrinfo.list_frontier","text":"Nutrinfo.resolve helper function.\n\nLists all vertices in our MetaDiGraph with outdegree zero.  These correspond to NutrientVectors that either are terminal basis NutrientVectors, or are NutrientVectors that we haven't yet tried to expand.\n\n\n\n\n\n","category":"method"},{"location":"#Nutrinfo.list_paths-Tuple{MetaDiGraph, String}","page":"Home","title":"Nutrinfo.list_paths","text":"Nutrinfo.resolve helper function.\n\nList all possible paths in the supplied MetaDiGraph g that start at vertex src.\n\nEach path is an odd-length array of strictly alternating names of vertices and edges, beginning with the vertex src.\n\nThis can be expected not to terminate if g contains any cycles, so use list_cycles() to determine that first.\n\n\n\n\n\n","category":"method"},{"location":"#Nutrinfo.make_graph-Tuple{}","page":"Home","title":"Nutrinfo.make_graph","text":"Nutrinfo.resolve helper function.\n\nCreates a MetaDiGraph where vertices represent NutrientVectors, and directed edges represent the Component relationships between them.\n\n\n\n\n\n","category":"method"},{"location":"#Nutrinfo.reduce_path-Tuple{Vector{String}, Vector{NutrientVector}}","page":"Home","title":"Nutrinfo.reduce_path","text":"Nutrinfo.resolve helper function.\n\nTake a path (produced by list_paths()) and \"reduce\" it to the equivalent \"weight\" of Component denoted by its terminal vertex.\n\nMultiply all the edges together, and then divide by all the servings of internal vertices\n\nedges are path[2], path[4], ..., path[length(path)-1]\n\ninternal vertices are path[3], path[5], ..., path[length(path)-2]\n\nThe point of this exercise is to create Components for all paths returned by list_paths() so that they can be added together to get the Components of the output of resolve().\n\n\n\n\n\n","category":"method"},{"location":"#Nutrinfo.resolve-Tuple{NutrientVector, Vector{NutrientVector}}","page":"Home","title":"Nutrinfo.resolve","text":"The \"resolve\" NutrientVector operation\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"Nutrinfo.jl is a program for tracking energy and macronutrient consumption.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It takes as input two JSON files:","category":"page"},{"location":"","page":"Home","title":"Home","text":"A nutrient information database, which contains nutritional information about a collection of foodstuffs as an array of JSON objects. This JSON array is validated using https://github.com/fredo-dedup/JSONSchema.jl to ensure that the nutritional information fields are recognised by the program.\nA food diary, which contains information about the user's daily intake of foodstuffs over a period of time.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For now, it produces as output a daily summary of the total energy, macronutrient quantity and macronutrient ratio consumed.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(In future it could be extended to supply micronutrient quantity information and create plots.)","category":"page"},{"location":"","page":"Home","title":"Home","text":"It makes use of https://github.com/JuliaIntervals/IntervalArithmetic.jl to deal with uncertainty in information about nutritional constituents and/or quantities of consumed foodstuffs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It makes use of https://github.com/PainterQubits/Unitful.jl to deal with standard (energy, capacity, mass) as well as ad-hoc (approximate serving sizes) needs for appropriately processing the kinds of quantities we'll be dealing with.","category":"page"}]
}
